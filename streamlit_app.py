import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import RobustScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
import io
from sklearn.preprocessing import MinMaxScaler
import seaborn as sns
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram
from scipy.cluster import hierarchy
import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN
import numpy as np
from scipy.spatial import ConvexHull
from scipy.spatial.distance import cdist
import math
from typing import List, Tuple

st.title('üíª –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–µ–ª—å lalalalala')

st.info("–≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª–∞—Ö")

with st.expander('–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'):

  unploaded_file = st.file_uploader(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª")
  session_state.preparation_state = False
    
with st.expander('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞'):
  
  if unploaded_file:
    st.header("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    col_index_change = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è", ("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞", "–ò–Ω–¥–µ–∫—Å–æ–º –¥–∞—Ç–∞—Å–µ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü"))

    null_transform = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", ("–£–¥–∞–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", "–ó–∞–º–µ–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –º–æ–¥—É –≤ –∫–æ–ª–æ–Ω–∫–µ"))

    categorial_to_numerical = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —á–∏—Å–ª–µ–Ω–Ω—ã–µ", ("OrdinalEncoder", "OneHotEncoder"))

    scaler_method = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", ("–ù–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è (StandartScaler)", "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é MinMaxScaler", "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é RobustScaler"))

    def preparation_state_button_on_click():
      if col_index_change == "–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞":
        df = pd.read_excel(unploaded_file)
      else:
        df = pd.read_excel(unploaded_file, index_col = 0)

      df.dropna(axis=1, how='all', inplace=True)

      if null_transform == "–£–¥–∞–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è":
        df = df.dropna()
      else: 
        for col in df.columns:
            df[col].fillna(df[col].mode()[0], inplace=True)

      if categorial_to_numerical == "OrdinalEncoder":
        df = OrdinalEncoder().fit_transform(df)
      else:
        df = OneHotEncoder().fit_transform(df)
      
      if scaler_method != "–ù–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é"
        if scaler_method == "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è (StandartScaler)":
          scaler = StandardScaler()
        else if scaler_method == "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é MinMaxScaler":
          scaler = MinMaxScaler()
        else if scaler_method == "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é RobustScaler"
          scaler = RobustScaler()
        df = scaler.fit_transform(df)

      session_state.preparation_state = True
      return df
    
    preparation_state_button = st.button("–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É", on_click=preparation_state_button_on_click)

  else:
    st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"')

with st.expander('–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º k-means++'):
      
  if unploaded_file:
    if session_state.preparation_state:
      if df.shape[0]>=3:
        elbow_method_need = st.selectbox("–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ª–æ–∫—Ç—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤?", ("–ù–µ—Ç", "–î–∞"), key="elbow_method_need_box")
        
        if elbow_method_need=="–î–∞":
          
          if df.shape[0]<=100:
            clusters_quan_elbow_method = st.selectbox("–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"]+[i for i in range (3,df.shape[0]+1)], key = "clusters_quan_elbow_method_key")
          else:
            clusters_quan_elbow_method = st.selectbox("–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"]+[i for i in range (3,100)], key = "clusters_quan_elbow_method_key")
      
          def elbow_method(df, max_clusters_quan):    
            # st.session_state.clicked = True
            ssd = []
            scaler = StandardScaler()
            df = scaler.fit_transform(df)
            for quan_of_clusters in range(2, max_clusters_quan+1):
                model = KMeans(n_clusters=quan_of_clusters, init="k-means++")
                model.fit(df)
                ssd.append(model.inertia_)
            plt.plot(range(2, max_clusters_quan+1), ssd, "o--")
            plt.title("–ì—Ä–∞—Ñ–∏–∫ –ª–æ–∫—Ç—è")
            plt.xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
            plt.ylabel("SSD")
            # Get the current axes
            ax = plt.gca()
            # Set x-axis to only display integers
            ax.xaxis.set_major_locator(MaxNLocator(integer=True))
            # st.session_state["elbow_plot"] = st.pyplot(plt)
            return st.pyplot(plt)
  
  
  
          # st.session_state["elbow_method_button_clicked"] 
          # def click_button():
            # myplot = elbow_method(df, clusters_quan_elbow_method)
          #   st.session_state["elbow_method_button_clicked"] = True
            # elbow_method(df, clusters_quan_elbow_method)
          
          if clusters_quan_elbow_method!="–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
            elbow_method_button = st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ª–æ–∫—Ç—è")
  
            if elbow_method_button:
              elbow_method(df, clusters_quan_elbow_method)
  
        if df.shape[0]<=100:
          k_means_cluster_quan = st.selectbox("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"]+[i for i in range (3,df.shape[0]+1)], key="clusters_quan_k_plus_plus")
        else:
          k_means_cluster_quan = st.selectbox("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"]+[i for i in range (3,100)], key="clusters_quan_k_plus_plus")
      
            
        def k_means_plus_plus(df, quan_of_clusters):
          try:
            scaler = StandardScaler()
            df = scaler.fit_transform(df)
            model = KMeans(n_clusters = quan_of_clusters, init = "k-means++")
            cluster_labels = model.fit_predict(df)
            df["–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞"] = cluster_labels
            st.session_state["current_df"] = df
            return df
                           
          except Exception as e:
            st.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ {e}")
            return None
            
        if k_means_cluster_quan!="–ù–µ –≤—ã–±—Ä–∞–Ω–æ": 
          df = k_means_plus_plus(df, k_means_cluster_quan)
          st.session_state["current_df"]
        # Create a Pandas Excel writer using XlsxWriter as the engine.
          buffer = io.BytesIO()
          
          with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
              # Write each dataframe to a different worksheet.
              st.session_state["current_df"].to_excel(writer, sheet_name='k_means')
          
              # Close the Pandas Excel writer and output the Excel file to the buffer
              writer.close()
          
              st.download_button(
                  label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –≤ —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª",
                  data=buffer,
                  file_name="dataframe_k_means_algorithm.xlsx",
                  mime="application/vnd.ms-excel"
              )
  
      
              
      else:
        st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –º–µ–Ω—å—à–µ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫, –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–≥—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞, –µ—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ")
    else:
      st.write("–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
  else:
    st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" –∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    
with st.expander('–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è'):  
  if unploaded_file:
    if session_state.preparation_state:
      if df.shape[0]>=3:
        st.write("–Ø –∑–¥–µ—Å—è!")
  
        def hierarchy_dendrogram(df, level=31):
          scaler = MinMaxScaler()
          scaled_data = scaler.fit_transform(df)
          df = pd.DataFrame(scaled_data, columns=df.columns)
          linkage_matrix = hierarchy.linkage(df.values, method="ward")
          # Create a figure and axis for the plot
          fig, ax = plt.subplots(figsize=(20, 10), dpi=200)
          ax.set_title("–î–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º–∞", fontsize=30)
          
          dendrogram(linkage_matrix, truncate_mode="level", p=level-1, ax=ax)
          
          st.pyplot(fig)
  
          return None
  
        dendrogram_need = st.selectbox("–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤?", ("–ù–µ—Ç", "–î–∞"), key="dendrogram_need_box")
        
        if dendrogram_need=="–î–∞":
          if df.shape[0]<=100:
            dendrogram_level = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—ã",["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"]+[i for i in range (3,df.shape[0]+1)])
          else:
            dendrogram_level = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—ã",["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"]+[i for i in range (3,100)])
            
          if dendrogram_level!="–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
            hierarchy_dendrogram(df, int(dendrogram_level))
             
        if df.shape[0]<=100:
          hierarchy_cluster_quan = st.selectbox("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"]+[i for i in range(3, df.shape[0]+1)], key="clusters_quan_hierarchy")
          # hierarchy_cluster_quan = st.selectbox("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"]+[i for i in range (3,df.shape[0]+1)], )
        else:
          hierarchy_cluster_quan = st.selectbox("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"]+[i for i in range (3,100)], key="clusters_quan_hierarchy")
          
        def hierarchy_clusterisation(df, quan_of_clusters):
          scaler = MinMaxScaler()
          scaled_data = scaler.fit_transform(df)
          df = pd.DataFrame(scaled_data, columns=df.columns)
          model = AgglomerativeClustering(quan_of_clusters)
          cluster_labels = model.fit_predict(df)
          df["–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞"] = cluster_labels
          st.session_state["current_df"] = df
          return df
  
        if hierarchy_cluster_quan!="–ù–µ –≤—ã–±—Ä–∞–Ω–æ": 
          df = hierarchy_clusterisation(df, hierarchy_cluster_quan)
          st.session_state["current_df"]
        # Create a Pandas Excel writer using XlsxWriter as the engine.
          buffer = io.BytesIO()
          
          with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
              # Write each dataframe to a different worksheet.
              st.session_state["current_df"].to_excel(writer, sheet_name='k_means')
          
              # Close the Pandas Excel writer and output the Excel file to the buffer
              writer.close()
          
              st.download_button(
                  label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –≤ —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª",
                  data=buffer,
                  file_name="dataframe_hierarchy_algorithm.xlsx",
                  mime="application/vnd.ms-excel"
              )
      
      else:
        st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –º–µ–Ω—å—à–µ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫, –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–≥—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞, –µ—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ")
    else:
      st.write("–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
  else:
    st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" –∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

with st.expander('–ú–µ—Ç–æ–¥ DBSCAN'):  
  if unploaded_file:
    if session_state.preparation_state:
      if df.shape[0]>=3:
        st.write("luala")
        scaler = MinMaxScaler()
        df = scaler.fit_transform(df)
  
        eps_to_use = st.number_input("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —ç–ø—Å–∏–ª–æ–Ω", value=0.01)
        min_samples_to_use = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä min_samples", [i for i in range(len(df)+1)])
      
      else:
        st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –º–µ–Ω—å—à–µ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫, –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–≥—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞, –µ—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ")
    else:
      st.write("–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
  else:
    st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" –∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

  

    



