import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

st.title('üíª –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü –≤ —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª–∞—Ö')

st.info("–≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª–∞—Ö")

with st.expander('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'):

  unploaded_file = st.file_uploader(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª")

  if unploaded_file:
    # col_numbers = ["–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞"] + [i for i in range (1,df.shape[1]+1)]
    col_index_change = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è", ["–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞",
                                                                                         "–ò–Ω–¥–µ–∫—Å–æ–º –¥–∞—Ç–∞—Å–µ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü"])
    if col_index_change:
      if col_index_change == "–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞":
        df = pd.read_excel(unploaded_file)
        df
      else:
        df = pd.read_excel(unploaded_file, index_col = 0)
        df

      
    # df = pd.read_excel(unploaded_file)
    # # df
    # col_titles = df.columns.values.tolist()
    # df.set_index(col_titles[1])
    # # col_titles
    # df
    
with st.expander('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞'):
  if unploaded_file:
    st.header("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

    col_index_numerical = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ, –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", ("–£–¥–∞–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", 
                                                                           "–ó–∞–º–µ–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ",
                                                                           "–ó–∞–º–µ–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –º–æ–¥—É –≤ –∫–æ–ª–æ–Ω–∫–µ"
                                                                          ))
    col_index_categorical = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ, –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", ("–£–¥–∞–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", 
                                                                           "–ó–∞–º–µ–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –º–æ–¥—É –≤ –∫–æ–ª–æ–Ω–∫–µ"
                                                                          ))
    # preparation_button = st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    # if preparation_button:
    #   st.write("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

  else:
    st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"')

with st.expander('–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º k-means++'):
  elbow_method_need = st.selectbox("–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ª–æ–∫—Ç—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤?", ("–î–∞", "–ù–µ—Ç"))
  if elbow_method_need == "–î–∞":
    def elbow_method(df, max_clusters_quan):
    
      try:
          if max_clusters_quan > len(df):
              print("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–ª–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ã. –£–∫–∞–∂–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
              return None
          if max_clusters_quan < 2:
              print("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –∏, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞. –£–∫–≤–∂–∏—Ç–µ —á–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —é–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –¥–≤—É–º.")
              return None
          if max_clusters_quan != int(max_clusters_quan):
              print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
              return None
              
          ssd = []
          scaler = StandardScaler()
          scaled_df = scaler.fit_transform(df)
          for quan_of_clusters in range(2, max_clusters_quan+1):
              model = KMeans(n_clusters = quan_of_clusters, init = "k-means++")
              model.fit(scaled_df)
              ssd.append(model.inertia_)
          
          plt.plot(range(2, max_clusters_quan+1), ssd, "o--")
          plt.title("–ì—Ä–∞—Ñ–∏–∫ –ª–æ–∫—Ç—è")
          return None
      
      except Exception as e:
          pst.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞: {e}")
          return None
      
  if unploaded_file:   
      k_means_cluster_quan = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
      if k_means_cluster_quan and not k_means_cluster_quan.isdigit():
        
        st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        

      def k_means_plus_plus(df, quan_of_clusters):
        try:
          scaler = StandardScaler()
          scaled_df = scaler.fit_transform(df)
          model = KMeans(n_clusters = quan_of_clusters, init = "k-means++")
          cluster_labels = model.fit_predict(scaled_df)
          df["–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞"] = cluster_labels
          return df
                         
        except Exception as e:
          st.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ {e}")
          return None
      if k_means_cluster_quan and k_means_cluster_quan.isdigit(): 
        df = k_means_plus_plus(df, int(k_means_cluster_quan))
        df
  else:
    st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"')
    
    


