import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

st.title('üñ•–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü –≤ —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª–∞—Ö')

st.info("–≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª–∞—Ö")

with st.expander('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'):

  unploaded_file = st.file_uploader(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª")

  if unploaded_file:
    df = pd.read_excel(unploaded_file, index_col=0)
    df
    
with st.expander('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞'):
  if unploaded_file:
    st.header("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    col_numbers = ["–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞"] + [i for i in range (1,df.shape[1]+1)]
    col_index = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∏–Ω–¥–µ–∫—Å–æ–º", col_numbers)
    # if col_index == "–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞":
    #   col_index = 0
    col_index_numerical = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ, –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", ("–£–¥–∞–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", 
                                                                           "–ó–∞–º–µ–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ",
                                                                           "–ó–∞–º–µ–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –º–æ–¥—É –≤ –∫–æ–ª–æ–Ω–∫–µ"
                                                                          ))
    col_index_categorical = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ, –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", ("–£–¥–∞–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", 
                                                                           "–ó–∞–º–µ–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –º–æ–¥—É –≤ –∫–æ–ª–æ–Ω–∫–µ"
                                                                          ))
    # preparation_button = st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    # if preparation_button:
    #   st.write("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

  else:
    st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"')

with st.expander('–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º k-means++'):
  if unploaded_file:   
      k_means_cluster_quan = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
      if k_means_cluster_quan and not k_means_cluster_quan.isdigit():
        
        st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        

      def k_means_plus_plus(df, quan_of_clusters):
        try:
          scaler = StandardScaler()
          scaled_df = scaler.fit_transform(df)
          model = KMeans(n_clusters = quan_of_clusters, init = "k-means++")
          cluster_labels = model.fit_predict(scaled_df)
          df["–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞"] = cluster_labels
          return df
                         
        except Exception as e:
          st.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ {e}")
          return None
      if k_means_cluster_quan and k_means_cluster_quan.isdigit(): 
        k_means_plus_plus(df, int(k_means_cluster_quan))
  else:
    st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"')
    


